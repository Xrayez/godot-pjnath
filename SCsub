#!/usr/bin/env python

Import('env')

from compat import open_utf8
from distutils.version import LooseVersion
from detect import get_ndk_version

env_module = env.Clone()

# Thirdparty source files

thirdparty_dir = 'thirdparty/'

pjlib_dir = thirdparty_dir + 'pjlib/src/pj/'

# pjlib_util_dir = 'thirdparty/pjlib-util/'
# pjlib_util_dirs = [
#     pjlib_util_dir + 'src/pjlib-util/',
# ]

# pjnath_dir = 'thirdparty/pjnath/'
# pjnath_dirs = [
#     pjnath_dir + 'src/pjnath/',
# ]

env_module.Prepend(CPPPATH=[thirdparty_dir + 'pjlib/include/'])
# env_module.Prepend(CPPPATH=[pjlib_util_dir + 'include/'])
# env_module.Prepend(CPPPATH=[pjnath_dir + 'include/'])

env_thirdparty = env_module.Clone()

# Common sources
pjlib_sources = [
    'activesock.c',
    'addr_resolv_sock.c',
    # 'addr_resolv_symbian.cpp',
    'array.c',
    'config.c',
    'ctype.c',
    'errno.c',
    'except.c',
    # 'exception_symbian.cpp',
    # 'extra-exports.c'
    'fifobuf.c',
    'file_access_unistd.c',
    # 'file_access_win32.c',
    'file_io_ansi.c',
    # 'file_io_win32.c',
    'guid.c',
    'guid_android.c',
    'guid_simple.c',
    # 'guid_uuid.c',
    # 'guid_win32.c',
    'hash.c',
    # 'ioqueue_common_abs.c', # NOT supposed to be compiled as stand-alone source
    # 'ioqueue_common_abs.h',
    # 'ioqueue_dummy.c', # no implementation
    'ioqueue_epoll.c',
    'ioqueue_select.c',
    # 'ioqueue_symbian.cpp',
    # 'ioqueue_uwp.cpp',
    # 'ioqueue_winnt.c',
    'ip_helper_generic.c',
    # 'ip_helper_symbian.cpp',
    # 'ip_helper_win32.c',
    # 'ip_helper_winphone8.c',
    'list.c',
    'lock.c',
    'log.c',
    # 'log_writer_printk.c', # exclusively for the Linux Kernel
    'log_writer_stdout.c',
    # 'log_writer_symbian_console.cpp',
    # 'os_core_darwin.m',
    # 'os_core_symbian.cpp',
    'os_core_unix.c',
    # 'os_core_win32.c',
    # 'os_error_symbian.cpp',
    'os_error_unix.c',
    # 'os_error_win32.c',
    'os_info.c',
    # 'os_info_iphone.m',
    # 'os_info_symbian.cpp',
    # 'os_rwmutex.c', # THIS FILE WILL BE INCLUDED BY os_core_*.c
    # 'os_symbian.h',
    'os_timestamp_common.c',
    'os_timestamp_posix.c',
    # 'os_timestamp_win32.c',
    # 'os_time_bsd.c',
    'os_time_common.c',
    'os_time_unix.c',
    # 'os_time_win32.c',
    'pool.c',
    'pool_buf.c',
    'pool_caching.c',
    'pool_dbg.c',
    # 'pool_policy_kmalloc.c',
    'pool_policy_malloc.c',
    'pool_policy_new.cpp',
    # 'pool_signature.h',
    'rand.c',
    'rbtree.c',
    # 'sock_bsd.c',
    'sock_common.c',
    # 'sock_qos_bsd.c',
    'sock_qos_common.c',
    # 'sock_qos_darwin.c',
    'sock_qos_dummy.c',
    # 'sock_qos_symbian.cpp',
    # 'sock_qos_wm.c',
    'sock_select.c',
    # 'sock_select_symbian.cpp',
    # 'sock_symbian.cpp',
    # 'sock_uwp.cpp',
    # 'sock_uwp.h',
    'ssl_sock_common.c',
    # 'ssl_sock_darwin.c',
    'ssl_sock_dump.c',
    'ssl_sock_gtls.c',
    'ssl_sock_imp_common.c',
    # 'ssl_sock_imp_common.h',
    'ssl_sock_ossl.c',
    # 'ssl_sock_symbian.cpp',
    'string.c',
    'symbols.c',
    'timer.c',
    # 'timer_symbian.cpp',
    'types.c',
    # 'unicode_symbian.cpp',
    # 'unicode_win32.c',
    # 'compat/sigjmp.c',
    'compat/string_compat.c',
    # 'compat/string.c',
]

pjlib_sources = [pjlib_dir + file for file in pjlib_sources]

env_thirdparty.add_source_files(env.modules_sources, pjlib_sources)

# Platform specific setup
if env["platform"] == "android":

    env_thirdparty.Append(CPPDEFINES={
            'PJ_M_NAME' : '\\\"' + env['android_arch'] + '\\\"',
            'PJ_IS_LITTLE_ENDIAN' : 1,
            'PJ_IS_BIG_ENDIAN' : 0,
        }
    )
    
env_thirdparty.disable_warnings()

# Optional arguments
for key, value in ARGLIST:
    if key == 'define':
        env_module.Append(CPPDEFINES=[value])

# Add module sources
env_module.add_source_files(env.modules_sources, '*.cpp')

Export('env_module')
