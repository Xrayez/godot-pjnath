#!/usr/bin/env python

Import('env')

from config import get_defines

env_module = env.Clone()

# Thirdparty source files
thirdparty_dir = 'thirdparty/'

pjlib_dir = thirdparty_dir + 'pjlib/src/pj/'
pjlib_util_dir = thirdparty_dir + 'pjlib-util/src/pjlib-util/'
pjnath_dir = thirdparty_dir + 'pjnath/src/pjnath/'

env_module.Prepend(CPPPATH=[thirdparty_dir + 'pjlib/include/'])
env_module.Prepend(CPPPATH=[thirdparty_dir + 'pjlib-util/include/'])
env_module.Prepend(CPPPATH=[thirdparty_dir + 'pjnath/include/'])

env_thirdparty = env_module.Clone()

# PJLIB
pjlib_sources = [
    # Allegedly platform-independent sources
    
    # Sync with pjlib/build/Makefile
    
    # Move these per platform if getting unresolved symbols
    
    'activesock.c',
    'addr_resolv_sock.c',
    'array.c',
    'config.c',
    'ctype.c',
    'errno.c',
    'except.c',
    'fifobuf.c',
    # 'file_io_ansi.c',
    'ioqueue_select.c',
    'ip_helper_generic.c',
    'list.c',
    'log.c',
    'hash.c',
    # 'ioqueue_epoll.c',
    'lock.c',
    'os_timestamp_common.c',
    'os_time_common.c',
    'log_writer_stdout.c',
    'os_info.c',
    # 'os_timestamp_posix.c',
    'pool_policy_malloc.c',
    'rand.c',
    'pool.c',
    'rbtree.c',
    'pool_buf.c',
    # 'pool_policy_new.cpp',
    'sock_common.c',
    'sock_qos_common.c',
    'sock_qos_dummy.c',
    'sock_select.c',
    'pool_caching.c',
    'pool_dbg.c',
    'ssl_sock_common.c',
    'ssl_sock_dump.c',
    'ssl_sock_ossl.c',
    'ssl_sock_gtls.c',
    'string.c',
    # 'ssl_sock_imp_common.c',
    'symbols.c',
    'types.c',
    'timer.c',
    # 'pool_signature.h',
    
    # Included per platform but kept for reference:
    # 'guid.c',
    # 'guid_simple.c',
    # 'guid_uuid.c',
    
    # Compat
    'compat/string_compat.c',
    # 'compat/sigjmp.c',
    # 'compat/string.c',
    
    # Not included
    # 'ioqueue_common_abs.c', # NOT supposed to be compiled as stand-alone source
    # 'ioqueue_common_abs.h',
    # 'ioqueue_dummy.c', # no implementation
    # 'os_rwmutex.c', # THIS FILE WILL BE INCLUDED BY os_core_*.c
    # 'ssl_sock_imp_common.h',
]
pjlib_sources = [pjlib_dir + file for file in pjlib_sources]

# PJLIB UTILS
pjlib_util_sources = [
    'base64.c',
    'cli.c',
    'cli_console.c',
    'cli_telnet.c',
    'crc32.c',
    'dns.c',
    'dns_dump.c',
    'dns_server.c',
    'errno.c',
    'getopt.c',
    'hmac_md5.c',
    'hmac_sha1.c',
    'http_client.c',
    'json.c',
    'md5.c',
    'pcap.c',
    'resolver.c',
    # 'resolver_wrap.cpp', # https://trac.pjsip.org/repos/ticket/886
    'scanner.c',
    # 'scanner_cis_bitwise.c', # THIS FILE IS INCLUDED BY scanner.c.
    # 'scanner_cis_uint.c', # THIS FILE IS INCLUDED BY scanner.c.
    'sha1.c',
    'srv_resolver.c',
    'string.c',
    'stun_simple.c',
    'stun_simple_client.c',
    'symbols.c',
    'xml.c',
    # 'xml_wrap.cpp', # https://trac.pjsip.org/repos/ticket/886
]
pjlib_util_sources = [pjlib_util_dir + file for file in pjlib_util_sources]

# PJNATH
pjnath_sources = [
    'errno.c',
    'ice_session.c',
    'ice_strans.c',
    'nat_detect.c',
    'stun_auth.c',
    'stun_msg.c',
    'stun_msg_dump.c',
    'stun_session.c',
    'stun_sock.c',
    'stun_transaction.c',
    'turn_session.c',
    'turn_sock.c',
]
pjnath_sources = [pjnath_dir + file for file in pjnath_sources]

#===============================================================================
# Platform specific setup
#===============================================================================

if env["platform"] == "windows": # note: fails compiling with MinGW
    
    pjlib_sources.remove(pjlib_dir + 'ip_helper_generic.c') # exclude
    
    pjlib_windows_sources = [
        'file_access_win32.c',
        'file_io_win32.c',
        'guid_win32.c',
        # 'ioqueue_winnt.c', // commented upstream
        'ip_helper_win32.c',
        'os_core_win32.c',
        'os_error_win32.c',
        'os_timestamp_win32.c',
        'os_time_win32.c',
        'sock_qos_wm.c',
        'unicode_win32.c',
        'sock_bsd.c',
        'sock_qos_bsd.c',
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_windows_sources]
    
elif env["platform"] == "uwp": # NOT TESTED
    
    pjlib_uwp_sources = [
        'ioqueue_uwp.cpp',
        # 'ip_helper_winphone8.c',
        'sock_uwp.cpp',
        'guid.c',
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_uwp_sources]
    
elif env["platform"] == "x11": # Linux
    
    pjlib_x11_sources = [
        'file_access_unistd.c',
        'os_core_unix.c',
        'os_error_unix.c',
        'os_time_unix.c',
        'guid_simple.c'
        
        # Exclusively for the Linux Kernel (?)
        # 'extra-exports.c',
        # 'log_writer_printk.c', 
        # 'pool_policy_kmalloc.c',
        
        # BSD
        # 'os_time_bsd.c',
        # 'sock_bsd.c',
        # 'sock_qos_bsd.c',
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_x11_sources]
    
elif env["platform"] == "osx": # MacOS # NOT TESTED
    
    pjlib_osx_sources = [
        'os_core_darwin.m',
        'sock_qos_darwin.c',
        'ssl_sock_darwin.c',
        'guid_simple.c'
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_osx_sources]
    
elif env["platform"] == "iphone": # iOS # NOT TESTED
    
    pjlib_iphone_sources = [
        'os_info_iphone.m',
        'guid.c',
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_iphone_sources]
    
elif env["platform"] == "android":

    pjlib_android_sources = [
        'guid_android.c',
        
        # Might not have the library:
        # 'guid_uuid.c'
        # 'guid_simple.c'
        
        # These couldn't be included in windows builds:
        'ioqueue_epoll.c',
        'os_timestamp_posix.c',
        'ssl_sock_imp_common.c',
    ]
    pjlib_sources += [pjlib_dir + file for file in pjlib_android_sources]
    
# Configure defines platform
env_thirdparty.Append(CPPDEFINES=get_defines(env))
#===============================================================================

# Done, add sources now
env_thirdparty.add_source_files(env.modules_sources, pjlib_sources)
env_thirdparty.add_source_files(env.modules_sources, pjlib_util_sources)
env_thirdparty.add_source_files(env.modules_sources, pjnath_sources)

env_thirdparty.disable_warnings()

# Optional arguments passed via command line 
# possibly add missing PJ_* preprocessor defines
for key, value in ARGLIST:
    if key == 'define':
        env_module.Append(CPPDEFINES=[value])

# Add module sources
env_module.add_source_files(env.modules_sources, '*.cpp') # pjnath.cpp etc.

Export('env_module')
