#!/usr/bin/env python
Import('env')

env_module = env.Clone()

pjlib_dir = 'thirdparty/pjlib/'
pjlib_dirs = [
    pjlib_dir + 'src/pj/',
    pjlib_dir + 'src/pj/compat',
]

pjlib_util_dir = 'thirdparty/pjlib-util/'
pjlib_util_dirs = [
    pjlib_util_dir + 'src/pjlib-util/',
]

pjnath_dir = 'thirdparty/pjnath/'
pjnath_dirs = [
    pjnath_dir + 'src/pjnath/',
]

env_module.Prepend(CPPPATH=[pjlib_dir + 'include/'])
env_module.Prepend(CPPPATH=[pjlib_util_dir + 'include/'])
env_module.Prepend(CPPPATH=[pjnath_dir + 'include/'])

# Add thirdparty sources
env_thirdparty = env_module.Clone()

for d in pjlib_dirs:
    env_thirdparty.add_source_files(env.modules_sources, d + '*.c')

for d in pjlib_util_dirs:
    env_thirdparty.add_source_files(env.modules_sources, d + '*.c')

for d in pjnath_dirs:
    env_thirdparty.add_source_files(env.modules_sources, d + '*.c')
    
env_thirdparty.disable_warnings()

# Optional arguments
for key, value in ARGLIST:
    if key == 'define':
        env_module.Append(CPPDEFINES=[value])

# Add module sources
env_module.add_source_files(env.modules_sources, '*.cpp')

Export('env_module')
